{"version":3,"sources":["components/Days.js","components/Goal.js","App.js","serviceWorker.js","index.js"],"names":["Days","changeColorAndState","_this","props","updateDateOn","dayId","dayOn","getClassnameDays","style","date","react_default","a","createElement","id","this","className","onClick","margin","Component","Goal","defaultValue","goal","onChange","e","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateWindow","setState","isMobile","window","innerWidth","setDateOn","daysOn","objectSpread","state","dateOn","on","defineProperty","renderDates","day","dateRow","i","daysPerMonth","push","components_Days","key","months","toString","renderMonths","month","renderRows","rows","j","hydrateStateWithLocalStorage","localStorage","hasOwnProperty","value","getItem","JSON","parse","saveStateToLocalStorage","setItem","stringify","target","clearProgress","lastDate","lastMonth","addEventListener","bind","removeEventListener","_this2","href","components_Goal","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a4a6fe9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../index.css';\r\n\r\nclass Days extends Component {\r\n  changeColorAndState = () => {\r\n    this.props.updateDateOn(this.props.dayId,this.props.dayOn);   \r\n  }\r\n\r\n  getClassnameDays = () => {\r\n    let style = \"\";\r\n    if (this.props.date) {\r\n      style = \"hexagon\" + ((this.props.dayOn===true) ? \" filled\" : \" unfilled\");\r\n    }\r\n    return style;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id={this.props.id} className=\"col span-1-12\" onClick={this.changeColorAndState}>\r\n        <div className={this.getClassnameDays()} style={{margin:\"auto\"}}><p className=\"hexagon-text\">{this.props.date}</p></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Days;\r\n","import React, { Component } from 'react';\r\nimport '../index.css';\r\n\r\nclass Goal extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"goal\">\r\n        <textarea defaultValue={this.props.goal} onChange={(e) => this.props.onChange(e)}></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Goal;\r\n","import React, { Component } from 'react';\nimport Days from './components/Days';\nimport Goal from './components/Goal';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      months: [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"],\n      daysPerMonth:[31,28,31,30,31,30,31,31,30,31,30,31],\n      lastDate: 1,\n      lastMonth: 0,\n      isMobile: false,\n      dateOn: {},\n      goal: \"\"\n    };\n  }\n\n  componentWillMount() {\n    this.hydrateStateWithLocalStorage();\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentDidMount() {\n    this.updateWindow();\n    window.addEventListener(\"resize\", this.updateWindow);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindow);\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    this.saveStateToLocalStorage();\n  }\n\n  updateWindow = () => {\n    this.setState({ isMobile: window.innerWidth < 600 });\n  }\n  setDateOn = (daysOn) => {\n    this.setState({\n      ...this.state.dateOn,\n      dateOn: daysOn\n    });\n  }\n\n  updateDateOn = (dayId, on) => {\n    this.setState({\n      dateOn: {\n        ...this.state.dateOn,\n        [dayId]: !on,\n      }\n    });\n  }\n\n  renderDates = (day,daysOn) => {\n    let dateRow = [];\n    for (let i=0; i<=11; i++) {\n      if (this.state.daysPerMonth[i] < day) {\n        dateRow.push(<Days date={\"\"} key={this.state.months[i]+day.toString()}/>)\n      } else {\n        // Days are keyed by the month+day, e.g. Apr24\n        let dayId = this.state.months[i]+day.toString();\n        daysOn[dayId]=false\n        dateRow.push(<Days date={day} \n          key={this.state.months[i]+day.toString()} \n          dayId={dayId}\n          dayOn={this.state.dateOn[dayId]}\n          updateDateOn={this.updateDateOn}\n          />)\n      }\n    }\n    return dateRow;\n  }\n\n  renderMonths = () => {\n    let month = [];\n    for (let i=0; i<=11; i++) {\n      month.push(<div className=\"col span-1-12 months\" key={this.state.months[i]}>\n        <h2>{this.state.months[i]}</h2>\n      </div>)\n    }\n    return month;\n  }\n\n  renderRows = (daysOn) => {\n    let rows = [];\n    for (let j=1; j<=31; j++){\n      rows.push(<div className=\"section group\" key={j}>\n        {this.renderDates(j,daysOn)}\n      </div>)\n    }\n    return rows;\n  }\n  \n  /* Using local storage because it is the simplest way\n  to keep persistent state, and there is no sensitive data\n  in the component's state */\n  hydrateStateWithLocalStorage = () => {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage = () => {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({ goal: e.target.value })\n  }\n\n  clearProgress = () => {\n    this.setState({ \n      goal: \"\",\n      dateOn: {}\n    })\n  }\n  \n  render() {\n    const isMobile = this.state.isMobile\n    let daysOn = {}\n    return (\n      <div className=\"App\">\n        <div className=\"header section group\">\n          <header className=\"col span-6-12\">\n            <h2 className=\"title\">The Every Day Calendar</h2>\n            <h3 className=\"sub-title\"> > Inspired by <a href=\"https://www.kickstarter.com/projects/simonegiertz/the-every-day-calendar\">Simone Giertz's </a> \n            project and <a href=\"https://www.youtube.com/watch?v=-lpvy-xkSNA\">video</a></h3>\n            <h3 className=\"sub-title\"> > Created by <a href=\"https://jrmrsr.github.io/Portfolio\">Jose Rondon</a></h3>\n          </header>\n          <div className=\"col span-6-12\">\n            <p className=\"title\"> > Click on the date hexagons below to save your progress, and add your goals in the textbox below</p>\n            <Goal\n            goal={this.state.goal}\n            onChange={this.onChange}\n            />\n            <button id=\"clear-progress-button\"onClick={() => this.clearProgress()}>Clear Calendar</button>\n          </div>\n        </div>\n\n          {isMobile ? (<div>Working on the mobile site!</div>) : \n          (\n          <div>\n            <div className=\"section group\">\n              {this.renderMonths()}\n            </div>\n              {this.renderRows(daysOn)}\n          </div>\n          )}\n          <footer>\n\n          </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}